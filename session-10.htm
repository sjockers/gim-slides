<!DOCTYPE HTML>
<html lang="de">
<head>
  <title>JavaScript: AJAX, JSON und XML</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=1274, user-scalable=no">
  <link rel="stylesheet" href="themes/gim/styles/style.css">
</head>
<body class="list">

  <header class="meta">
    <hgroup class="container">
      <h1>Grundlagen der Webentwicklung <span>Wintersemester 2012</span></h1>
    </hgroup>
  </header>

  <section class="slides">

    <header class="caption">
      <h1>JavaScript: AJAX, JSON und XML</h1>
    </header>

    <div class="slide cover h" id="Cover-AJAX"><div>
      <section>
        <img src="pictures/javascript/ajax.jpg" alt="">
      </section>
    </div></div>

    <div class="slide" id="Index"><div>
      <section>
        <header>
          <h2>Übersicht</h2>
        </header>
        <ul>
          <li>Exkurs: XML und JSON</li>
          <li>Asynchrones Laden von Daten mit AJAX</li>
          <li>AJAX: Probleme und alternative Ansätze</li>
        </ul>
      </section>
    </div></div>

    <div class="slide" id="XML-1"><div>
      <section>
        <header>
          <h2>Exkurs: XML</h2>
        </header>

        <ul>
          <li><em>Extensible Markup Language</em></li>
          <li>Beschreibungssprache für Dokumente</li>
          <li>Format für den Austausch von Daten zwischen Computersystemen</li>
          <li>XML kann die Basis für konkrete Formate bilden, z.B. XHTML, SVG, DOCX</li>
          <li>
            XML-Dateien sind Textdokumente:
            <ul>
              <li>maschinen- und menschenlesbar</li>
              <li>können mit einem beliebigen Texteditor bearbeitet werden</li>
            </ul>
          </li>
        </ul>

      </section>
    </div></div>

    <div class="slide" id="XML-2"><div>
      <section>
        <pre>
          <code class="lots-of-code"><mark>&lt;album&gt;</mark></code>
          <code class="lots-of-code"> <mark>&lt;titel&gt;</mark>Nevermind<mark>&lt;/titel&gt;</mark></code>
          <code class="lots-of-code"> <mark>&lt;year&gt;</mark>1991<mark>&lt;/year&gt;</mark></code>
          <code class="lots-of-code"> <mark>&lt;band&gt;</mark>Nirvana<mark>&lt;/band&gt;</mark></code>
          <code class="lots-of-code"> <mark>&lt;artists&gt;</mark></code>
          <code class="lots-of-code">   <mark>&lt;artist&gt;</mark>Kurt Cobain<mark>&lt;/artist&gt;</mark></code>
          <code class="lots-of-code">   <mark>&lt;artist&gt;</mark>Krist Novoseli&#x107;<mark>&lt;/artist&gt;</mark></code>
          <code class="lots-of-code">   <mark>&lt;artist&gt;</mark>Dave Grohl<mark>&lt;/artist&gt;</mark></code>
          <code class="lots-of-code"> <mark>&lt;/artists&gt;</mark></code>
          <code class="lots-of-code"><mark>&lt;/album&gt;</mark></code>
        <pre>

      </section>
    </div></div>

    <div class="slide" id="XML-3"><div>
      <section>
        <header>
          <h2>XML: Formelle Regeln (Wichtigste Beispiele)</h2>
        </header>

        <ul>
          <li>Ein XML-Dokument beginnt mit einem einzelnen Root-Element</li>
          <li>Elemente müssen geöffnet und geschlossen werden</li>
          <li>Elemente dürfen sich nicht überlappen</li>
          <li>Leere Tags (<em>"Empty-Element-Tags"</em>) enden mit <code>/></code> (z.B. <code>&lt;br/&gt;</code>)</li>
          <li>Attribut-Werte stehen in Anführungszeichen</li>
        </ul>

      </section>
    </div></div>

    <div class="slide" id="XML-4"><div>
      <section>
        <header>
          <h2>XML: Tags und Attribute</h2>
        </header>

        <ul>
          <li>Elemente enthalten <em>Daten</em></li>
          <li>Attribute enthalten <em>Metadaten</em></li>
          <li>
            Dauemenregel: <em>"Sieht der Nutzer die Information?"</em>
            <ul>
              <li>ja &rarr; Element verwenden</li>
              <li>nein &rarr; Attribut verwenden</li>
            </ul>
          </li>
          <li>Beispiel (das <code>a</code>-Tag in XHTML):<br/><code>&lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt;</code></li>
        </ul>

      </section>
    </div></div>

    <div class="slide" id="JSON"><div>
      <section>
        <header>
          <h2>Alternative zu XML: JSON</h2>
        </header>

        <ul>
          <li><em>JavaScript Object Notation</em></li>
          <li>Wie XML, ein Format für den Austausch von Daten zwischen Computern</li>
          <li>
            Auch JSON-Dateien sind Textdokumente:
            <ul>
              <li>maschinen- und menschenlesbar</li>
              <li>können mit einem beliebigen Texteditor bearbeitet werden</li>
              <li>aber: Ein JSON-Dokument ist ausführbarer JavaScript-Code!</li>
            </ul>
          </li>
        </ul>

      </section>
    </div></div>

    <div class="slide" id="Objects"><div>
      <section>
        <header>
          <h2>Wiederholung: Objekte in JavaScript</h2>
        </header>
        <pre>
          <code class="lots-of-code">var emptyMap = <mark>{}</mark>;  </code>
          <code class="lots-of-code">var homogenousMap = <mark>{one: 1, two: 2, three: 3};</mark></code>
          <code class="lots-of-code">var heterogenousMap = <mark>{one: 1, two: "two", three: 3.0};</mark></code>
        </pre>
        <ul>
          <li>Property Map – enthält <em>Key-Value-Pairs</em></li>
          <li>Zugriff über: <code>homogeneousMap.one</code></li>
          <li>Oder: <code>homogeneousMap["one"]</code></li>
        </ul>
      </section>
    </div></div>

    <div class="slide" id="JSON-2"><div>
      <section>
        <pre>
          <code class="lots-of-code">{ </code>
          <code class="lots-of-code"> <mark>titel</mark>: "Nevermind", </code>
          <code class="lots-of-code"> <mark>year</mark>: 1991, </code>
          <code class="lots-of-code"> <mark>band</mark>: "Nirvana", </code>
          <code class="lots-of-code"> <mark>artists</mark>: [ </code>
          <code class="lots-of-code">   "Kurt Cobain", </code>
          <code class="lots-of-code">   "Krist Novoseli&#x107;", </code>
          <code class="lots-of-code">   "Dave Grohl" </code>
          <code class="lots-of-code"> ] </code>
          <code class="lots-of-code">} </code>
        <pre>

      </section>
    </div></div>


    <div class="slide" id="JSON-3"><div>
      <section>
        <header>
          <h2>JSON: Vorteile gegenüber XML</h2>
        </header>

        <ul>
          <li>ausführbarer Code – kann einfacher mit JavaScript verarbeitet werden</li>
          <li>weniger "Overhead" – weniger redundante Zeichen (vgl. XML-Beispiel)</li>
          <li>bessere Lesbarkeit (Ansichtssache)</li>
        </ul>

      </section>
    </div></div>
    <div class="slide" id="AJAX-1"><div>
      <section>
        <header>
          <h2>Asynchrones laden von Daten: AJAX</h2>
        </header>

        <ul>
          <li><em>Asynchronous JavaScript and XML</em></li>
          <li>Asynchrone Datenübertragung zwischen Browser und Server</li>
          <li>"Nachladen von Daten ohne die aktuelle Seite zu verlassen"</li>
          <li>Technische Grundlage: Das "XHR-Objekt": <code>XMLHttpRequest</code> </li>
          <li>Kann für beliebige Inhalte verwendet werden<br/> (nicht nur für XML, auch für JSON)</li>
          <li>Details: <a href="http://ajaxpatterns.org/XMLHttpRequest_Call">
            http://ajaxpatterns.org/XMLHttpRequest_Call
          </a></li>
        </ul>

      </section>
    </div></div>

    <div class="slide" id="AJAX-2"><div>
      <section>
        <header>
          <h2>Das "XHR-Objekt": Synchrone Verwendung</h2>
        </header>

        <pre>
        <code class="lots-of-code">var xhReq = new <mark>XMLHttpRequest()</mark>; </code>
        <code class="lots-of-code">xhReq.open("GET", "./path/to/your/file", false); </code>
        <code class="lots-of-code">xhReq.send(null); </code>
        <code class="lots-of-code">var serverResponse = xhReq.responseText; </code>
        </pre>

        JavaScript-Ausführung wird angehalten, bis die nachgeladenen Daten zur Verfügung stehen
        (<em>noch kein AJAX</em> – nur synchrone Kommunikation!)

      </section>
    </div></div>

    <div class="slide" id="AJAX-3"><div>
      <section>
        <header>
          <h2>Das "XHR-Objekt": Asynchrone Verwendung <em>– AJAX</em></h2>
        </header>

        <pre>
        <code class="lots-of-code">var xhReq = new <mark>XMLHttpRequest()</mark>; </code>
        <code class="lots-of-code">xhReq.open("GET", "./path/to/your/file", true);</code>
        <code class="lots-of-code">xhReq.onreadystatechange = function() { </code>
        <code class="lots-of-code"> var serverResponse = xhReq.responseText; </code>
        <code class="lots-of-code"> // (stark vereinfachtes Beispiel) </code>
        <code class="lots-of-code">}; </code>
        <code class="lots-of-code">xhReq.send(null); </code>
        </pre>

      </section>
    </div></div>

    <div class="slide" id="AJAX-4"><div>
      <section>
        <header>
          <h2>AJAX: Probleme</h2>
        </header>

            <strong>Problem 1: Inkonsistente Implementierung in verschiedenen Browsern</strong>
            <ul>
              <li>Details: <a href="http://ajaxpatterns.org/XMLHttpRequest_Call">
                http://ajaxpatterns.org/XMLHttpRequest_Call
              </a></li>
            </ul>

            <strong>Problem 2: <em>Same-Origin-Policy</em></strong>
            <ul>
              <li>Sicherheitskonzept: Über AJAX können nur Inhalte von der selben Domain geladen werden</li>
              <li>Alternative: JSONP (JSON with Padding)</li>
            </ul>

      </section>
    </div></div>

    <div class="slide" id="JSONP-1"><div>
      <section>
        <header>
          <h2>JSONP: Statische Einbindung</h2>
        </header>

        <strong>Statisch: Anfrage im HTML-Dokument </strong>
        <pre>
        <code class="lots-of-code">&lt;script type=&quot;text/javascript&quot;</code>
        <code class="lots-of-code">src=&quot;http://beispiel.com?jsonp=<mark>meineFunktion</mark>&quot;&gt;&lt;/script&gt;</code>
        </pre>

        <strong>JavaScript Antwort: Funktionsaufruf mit JSON-Parameter.</strong>

        <pre>
        <code class="lots-of-code">function meineFunktion(<mark>response</mark>) {</code>
        <code class="lots-of-code">  // Beispiel: Siehe "Flickr Kickstart"</code>
        <code class="lots-of-code">}</code>
        </pre>

      </section>
    </div></div>

    <div class="slide" id="JSONP-2"><div>
      <section>
        <header>
          <h2>JSONP: Dynamische Einbindung</h2>
        </header>

        <strong>Dynamisch: <em>Script element injection</em> </strong>

        <pre>
        <code class="lots-of-code">// Hinzufügen von Script-Tags zur Laufzeit:</code>
        <code class="lots-of-code">var s = document.createElement("script");</code>
        <code class="lots-of-code">s.src="http://beispiel.com?jsonp=meineFunktion"</code>
        <code class="lots-of-code">document.getElementsByTagName('head')[0].appendChild(s);</code>
        </pre>

      </section>
    </div></div>

    <div class="slide" id="ThankYou"><div>
      <section>
        <header>
          <h2>Fragen?</h2>
        </header>
        <p>Simon Jockers<br/>
          <a href="mailto:jockers@htw-berlin.de">jockers@htw-berlin.de</a></p>
      </section>
    </div></div>

  </section>
  <!--
    To hide progress bar from entire presentation
    just remove “progress” element.
    -->
  <div class="progress"><div></div></div>
  <script src="scripts/script.js"></script>
  <!-- Copyright © 2010–2012 Vadim Makeev — pepelsbey.net -->
  <!-- Photos by John Carey — fiftyfootshadows.net -->
</body>
</html>
